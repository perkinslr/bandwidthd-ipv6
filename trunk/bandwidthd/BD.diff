diff -r ../../branches/bandwidthd.IPv4/.svn/entries ./.svn/entries
5c5
< svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/branches/bandwidthd.IPv4
---
> svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/trunk/bandwidthd
29c29
< config.guess
---
> config.sub
35,36c35,36
< 2012-10-15T20:41:22.180774Z
< b56c1128b4fde0e52e18df8e85440e74
---
> 2012-10-15T20:42:03.989094Z
> 7f17334df2eac88f42eb1a2ba17d2ee8
61c61
< 39027
---
> 27846
63c63
< conf.y
---
> README
69,70c69,70
< 2012-10-15T20:41:22.196774Z
< c452f8764e2001c83aba7c11ce0f47c1
---
> 2012-10-15T20:42:03.989094Z
> 92f4917888884047cb93924c1cb5386c
95c95
< 3942
---
> 13282
97c97
< sqlight.c
---
> bandwidthd.h
103,104c103,104
< 2012-10-15T20:41:22.120773Z
< 5b7aa51a779f3e1d3b48ab7e25fb2c14
---
> 2012-10-15T20:42:03.989094Z
> de4c2a095fe653e36934fcaf6786a7c1
129,132c129
< 17537
< 
< phphtdocs
< dir
---
> 5988
134c131
< README
---
> INSTALL.Windows
140,141c137,138
< 2012-10-15T20:41:22.200774Z
< 92f4917888884047cb93924c1cb5386c
---
> 2012-10-15T20:42:03.989094Z
> df260bb9cc4d328380df0424b305f9ae
166c163
< 13282
---
> 772
168c165,168
< config.sub
---
> extensions
> dir
> 
> TODO
174,175c174,175
< 2012-10-15T20:41:22.232774Z
< 7f17334df2eac88f42eb1a2ba17d2ee8
---
> 2012-10-15T20:42:03.997094Z
> 00ee34fc37a9559ec8a0340f1ce3dc1f
179d178
< has-props
200c199,200
< 27846
---
> 
> 658
202c202
< bandwidthd.h
---
> pgsql.c
208,209c208,209
< 2012-10-15T20:41:22.224774Z
< de4c2a095fe653e36934fcaf6786a7c1
---
> 2012-10-15T20:42:03.989094Z
> cf02ac2be071a817b7c3bde0a5358944
234c234
< 5988
---
> 19860
236c236,239
< INSTALL.Windows
---
> etc
> dir
> 
> aclocal.m4
242,243c245,246
< 2012-10-15T20:41:22.224774Z
< df260bb9cc4d328380df0424b305f9ae
---
> 2012-10-15T20:42:03.997094Z
> 989741fd1282dba9fa55514217a3e6a8
268,271c271
< 772
< 
< extensions
< dir
---
> 305
273c273
< TODO
---
> install-sh
279,280c279,280
< 2012-10-15T20:41:22.368775Z
< 00ee34fc37a9559ec8a0340f1ce3dc1f
---
> 2012-10-15T20:42:03.989094Z
> 5afe8eb5573965dfb58378e4e46f3813
283a284
> has-props
304,305c305
< 
< 658
---
> 5598
307c307
< pgsql.c
---
> conf.l
313,314c313,314
< 2012-10-15T20:41:22.212774Z
< cf02ac2be071a817b7c3bde0a5358944
---
> 2012-10-15T20:42:03.989094Z
> 6433dd4533371417b7ca08b4ea1286d0
339,342c339
< 19860
< 
< etc
< dir
---
> 1277
344c341
< aclocal.m4
---
> extensions.c
350,351c347,348
< 2012-10-15T20:41:22.380775Z
< 989741fd1282dba9fa55514217a3e6a8
---
> 2012-10-15T20:42:03.989094Z
> 8e1ec6aa48923a92028d46c424909e8e
376c373
< 305
---
> 3375
378c375
< install-sh
---
> graph.c
384,385c381,382
< 2012-10-15T20:41:22.224774Z
< 5afe8eb5573965dfb58378e4e46f3813
---
> 2012-10-15T20:42:03.989094Z
> f5a1b395dddcbabf9f729c0fa8517680
389d385
< has-props
410c406,407
< 5598
---
> 
> 32721
412c409
< conf.l
---
> Makefile.in
418,419c415,416
< 2012-10-15T20:41:22.224774Z
< 6433dd4533371417b7ca08b4ea1286d0
---
> 2012-10-15T20:42:03.989094Z
> 458c9f4439d3910ee4b0ba59df71f6ab
444c441
< 1277
---
> 2037
446c443,446
< extensions.c
---
> htdocs
> dir
> 
> configure.in
452,453c452,453
< 2012-10-15T20:41:22.168774Z
< 8e1ec6aa48923a92028d46c424909e8e
---
> 2012-10-15T20:42:03.989094Z
> ae0659de5b8488cf3f6efbc087326373
478c478
< 3375
---
> 4887
480c480
< Makefile.in
---
> CHANGELOG
486,487c486,487
< 2012-10-15T20:41:22.104773Z
< 458c9f4439d3910ee4b0ba59df71f6ab
---
> 2012-10-15T20:42:03.989094Z
> f38dfb17260f0e3722c7f168636b8566
512c512
< 2037
---
> 7103
514c514
< graph.c
---
> INSTALL.Unix
520,521c520,521
< 2012-10-15T20:41:22.148773Z
< f5a1b395dddcbabf9f729c0fa8517680
---
> 2012-10-15T20:42:03.989094Z
> e60736d3faf7aa8d9c4c2d1c6bbfcec3
546,549c546
< 32721
< 
< htdocs
< dir
---
> 612
551c548
< configure.in
---
> bandwidthd.c
557,558c554,555
< 2012-10-15T20:41:22.212774Z
< ae0659de5b8488cf3f6efbc087326373
---
> 2012-10-15T20:42:03.989094Z
> 5c08d37625e0c6a00fb1039f3bf0c68e
583c580
< 4887
---
> 33048
585c582
< CHANGELOG
---
> config.guess
591,592c588,589
< 2012-10-15T20:41:22.160774Z
< f38dfb17260f0e3722c7f168636b8566
---
> 2012-10-15T20:42:03.989094Z
> b56c1128b4fde0e52e18df8e85440e74
595a593
> has-props
616,617c614
< 
< 7103
---
> 39027
619c616,619
< INSTALL.Unix
---
> phphtdocs
> dir
> 
> sqlight.c
625,626c625,626
< 2012-10-15T20:41:22.136773Z
< e60736d3faf7aa8d9c4c2d1c6bbfcec3
---
> 2012-10-15T20:42:03.989094Z
> 5b7aa51a779f3e1d3b48ab7e25fb2c14
651c651
< 612
---
> 17537
653c653
< bandwidthd.c
---
> conf.y
659,660c659,660
< 2012-10-15T20:41:22.124773Z
< 5c08d37625e0c6a00fb1039f3bf0c68e
---
> 2012-10-15T20:42:03.989094Z
> c452f8764e2001c83aba7c11ce0f47c1
685c685
< 33048
---
> 3942
Only in .: BD.diff
diff -r ../../branches/bandwidthd.IPv4/CHANGELOG ./CHANGELOG
0a1,16
> 2.0.2.IPv6
> 
> Added support for excluding subnets.
> Added mac record support for pgsql.
> 
> Cleaned up whitespace (bandwidthd.c)
> Moved global variables from top of bandwidthd.c to bandwidthd.h 
> 	(help avoid namespace collisions if someone only looks in the header file)
> Added struct for vlan headers (bandwidthd.h)
> Added configure option for turning pgsql off (configure.in)
> Added functions for ignoring subnets (bandwidthd.c)
> Added configure option for embedding python for scripting and to optimize ip lookups (bandwidthd.c bandwidthd.h configure.in)
> 
> 
> 2.0.1
> 
diff -r ../../branches/bandwidthd.IPv4/INSTALL.Unix ./INSTALL.Unix
15a16,17
> autoconf && autoheader
> 
diff -r ../../branches/bandwidthd.IPv4/README ./README
0a1,8
> Copyright Logan Perkins 2012 <perkins@alestan.publicvm.com>
> 
> Parts copyright David Hinkle.
> 
> Based off of bandwidthd, by David Hinkle.  Special thanks to the bandwidthd 
> team of developers.  The original readme file follows below, as the changes
> thus far have been minor.  For the complete changes since the fork, see BD.diff
> 
diff -r ../../branches/bandwidthd.IPv4/TODO ./TODO
0a1,6
> Add struct for storing IPv6 information
> Make IP information use a linked list
> Add mac record support to sqlite and cdf
> 
> OLD PROJECT TODO (will still get done)
> 
16a23,25
> 
> 
> 
diff -r ../../branches/bandwidthd.IPv4/aclocal.m4 ./aclocal.m4
8a9,11
> 
> 
> 
diff -r ../../branches/bandwidthd.IPv4/bandwidthd.c ./bandwidthd.c
16,21d15
< // ****************************************************************************************
< // ** Global Variables
< // ****************************************************************************************
< 
< #define SNAPLEN 100
< 
23d16
< 
26a20
> unsigned int NotSubnetCount = 0;
33d26
< 
34a28
> struct SubnetData NotSubnetTable[SUBNET_NUM];
35a30,34
> size_t ICGrandTotalDataPoints = 0;
> 
> #ifdef HAVE_PYTHON
> PyObject *IpTableDict;
> #endif
39d37
< 
41a40
> void BroadcastState(int fd);
43d41
< 
45c43
< 
---
> struct Broadcast *Broadcasts = NULL;
47d44
< 
50a48
> 
61d58
< 
72d68
< 
89d84
< 
94d88
< 
102d95
< 	
130d122
< 
134d125
< 
137d127
< 
149d138
< 			
151d139
< 
154d141
< 
157d143
< 
168d153
< 
170d154
< 	
174d157
< 
179d161
< 
188,189c170,171
< 
< 	switch (level) {
---
> 	switch (level) 
> 	{
195c177
< 		break;
---
> 			break;
203c185
< 		break;
---
> 			break;
211c193
< 		break;
---
> 			break;
219,220c201
< 		break;
< 
---
> 			break;
230d210
< 
241c221
< 			fclose(pidfile);		
---
> 			fclose(pidfile);
281d260
< 
284d262
< 
286d263
< 
290d266
< 
319d294
< 
323c298
< 	config.filter = "ip";
---
> 	config.filter = "ip or ether proto 1537";
338d312
< 
340d313
< 
365d337
< 
374d345
< 
382c353,358
< 
---
>   for (Counter = 0; Counter < NotSubnetCount; Counter++)
>     {
>     addr.s_addr = ntohl(NotSubnetTable[Counter].ip);
>     addr2.s_addr = ntohl(NotSubnetTable[Counter].mask);
>     syslog(LOG_INFO, "Ignoring subnet %s with netmask %s", inet_ntoa(addr), inet_ntoa(addr2));
>     }
402,403c378
< #endif	
< 
---
> #endif
406d380
< 
411d384
< 
413d385
< 
415d386
< 
422d392
< 
426d395
< 
432d400
< 
441d408
< 
444d410
< 
447d412
< 
449,450c414
< 
< 	syslog(LOG_INFO, "Opening %s", config.dev);	
---
> 	syslog(LOG_INFO, "Opening %s", config.dev);
457d420
< 
465d427
< 
468d429
< 
480c441
< 			break;	
---
> 			break;
502d462
< 
504c464
< 		{											
---
> 		{
509d468
< 
515c474,478
< 
---
> #ifdef HAVE_PYTHON
> 	Py_Initialize();
> 	IpTableDict=PyDict_New();
> 	Py_Finalize();
> #endif
524c487,491
< 		if (IntervalFinished)  // Then write out this intervals data and possibly kick off the grapher
---
> 		if (IntervalFinished){  // Then write out this intervals data and possibly kick off the grapher
> #ifdef HAVE_PYTHON
> 			PyDict_Clear(IpTableDict);
> 			Py_Finalize();
> #endif
526c493
< 
---
> 		}
534d500
< 
536c502
< 	exit(0);		
---
> 	exit(0);
542d507
< 
548d512
< 
553c517
< 		ProgramStart = current_time;	
---
> 		ProgramStart = current_time;
555d518
< 
557a521
> 	BroadcastState(pcap_fileno(pd));
564a529,597
> // Write an ethernet packet describing us out the given socket
> void BroadcastState(int fd)
>   {
>   char buf[SNAPLEN];
>   char enet_broadcast[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
>   struct ether_header *eptr;
>   if (DataLink != DLT_EN10MB)
>     return;
>   if ((14+strlen(config.sensor_name)+strlen(config.dev)) > SNAPLEN)
>     {
>     syslog(LOG_ERR, "Sensor and device name too long for broadcast");
>     return;
>     }
>   bzero(buf, sizeof(buf));
>   eptr = (struct ether_header *) buf;    /* start of 16-byte Ethernet header */
>   // Always broadcast
>   memcpy(&buf[0], enet_broadcast, 6);
>   memcpy(&buf[6], enet_broadcast, 6); // Would rather use our own mac address
>   eptr->ether_type = htons(1537); // Random packet type we'll use for bandwidthd
>   memcpy(buf+14, config.sensor_name, strlen(config.sensor_name)+1);
>   memcpy(buf+14+strlen(config.sensor_name)+1, config.dev, strlen(config.dev)+1);
>   if (write(fd, buf, SNAPLEN) != SNAPLEN)
>     syslog(LOG_ERR, "Write error during bandwidthd broadcast");
>   }
> 
> void ParseBroadcast(const u_char *in)
>   {
>   char *p = (char *)in+14; // Skip ethernet header
>   struct Broadcast *bc;
>   struct Broadcast *bc2;
>   char *sensor_name;
>   char *interface;
>   sensor_name = p;
>   interface = p+strlen(p)+1;
>   // Sanity check
>   if (strlen(sensor_name) > SNAPLEN || strlen(interface) > SNAPLEN)
>     {
>     syslog(LOG_ERR, "Bandwidthd broadcast packet failed sanity check, discarding");
>     return;
>     }
>   if ((!strcmp(sensor_name, config.sensor_name)) && (!strcmp(interface, config.dev)))
>     return; // Our own packet
>   for (bc = Broadcasts; bc; bc = bc->next)
>     {
>     if ((!strcmp(sensor_name, bc->sensor_name)) && (!strcmp(interface, bc->interface)))
>       {
>       // Found this link
>       bc->received = time(NULL);
>       return;
>       }
>     }
>   bc2 = malloc(sizeof(struct Broadcast));
>   bc2->sensor_name = strdup(sensor_name);
>   bc2->interface = strdup(interface);
>   bc2->received = time(NULL);
>   bc2->next = NULL;
>   if (Broadcasts == NULL)
>     {
>     Broadcasts = bc2;
>     return;
>     }
>   else
>     {
>     for (bc = Broadcasts; bc->next; bc = bc->next);
>     bc->next = bc2;
>     return;
>     }
>   }
> 
568c601,602
< 
---
> 	unsigned short SkipSrc = 0;
> 	unsigned short SkipDst = 0;
570a605
> 	struct VlanHeader *vlanhdr;
572d606
< 
575d608
< 
577d609
< 
580d611
< 
582c613,617
< 
---
> 	vlanhdr = (struct vlanhdr *) p;
> 	if (eptr->ether_type == htons(1537))
> 		ParseBroadcast(p);
> 	if (vlanhdr->ether_type[0]==0x81 && vlanhdr->ether_type[1]==0x00) //Two byte-wise checks instead of 1 word-wise check to avoid word boundary issues on some intel processors
> 		p+=4;
585d619
< 
587d620
< 
590d622
< 
593c625,635
< 	
---
> 	for (Counter = 0; Counter < NotSubnetCount; Counter++)
> 		{
> 		if (NotSubnetTable[Counter].ip == (srcip & NotSubnetTable[Counter].mask))  //In the list of subnets we're ignoring.
> 			{
> 			SkipSrc=1;
> 			}
> 		if (NotSubnetTable[Counter].ip == (dstip & NotSubnetTable[Counter].mask))  //In the list of subnets we're ignoring.
> 			{
> 			SkipDst=1;
> 			}
> 		}
595c637
< 		{	 
---
> 		{
598d639
< 
601c642
< 		if (SubnetTable[Counter].ip == (srcip & SubnetTable[Counter].mask))
---
> 		if ((SubnetTable[Counter].ip == (srcip & SubnetTable[Counter].mask)) && !SkipSrc)
608d648
< 
613,614c653
< 	
< 		if (SubnetTable[Counter].ip == (dstip & SubnetTable[Counter].mask))
---
> 		if ((SubnetTable[Counter].ip == (dstip & SubnetTable[Counter].mask)) && !SkipDst)
621d659
< 
625c663
< 			}						 
---
> 			}
630d667
< 
638d674
< 
641d676
< 
650d684
< 
659d692
< 	
675d707
< 		
680a713,755
> void IgnoreMonitorSubnet(unsigned int ip, unsigned int mask)
>   {
>   unsigned int subnet = ip & mask;
>   int Counter, Counter2;
>   struct in_addr addr, addr2;
>   addr.s_addr = ntohl(subnet);
>   addr2.s_addr = ntohl(mask);
>   for (Counter = 0; Counter < NotSubnetCount; Counter++)
>     {
>     if ((NotSubnetTable[Counter].ip == subnet) && (NotSubnetTable[Counter].mask == mask))
>       {
>       syslog(LOG_ERR, "Subnet %s/%s already exists, skipping.", inet_ntoa(addr), inet_ntoa(addr2));
>       return;
>       }
>     }
>   for (Counter = 0; Counter < NotSubnetCount; Counter++)
>     {
>     if ((NotSubnetTable[Counter].ip == (ip & NotSubnetTable[Counter].mask)) && (NotSubnetTable[Counter].mask < mask))
>       {
>       syslog(LOG_ERR, "Subnet %s/%s is already excluded, skipping.", inet_ntoa(addr), inet_ntoa(addr2));
>       return;
>       }
>     }
>   for (Counter = 0; Counter < NotSubnetCount; Counter++)
>     {
>     if (((NotSubnetTable[Counter].ip & mask) == subnet) && (NotSubnetTable[Counter].mask > mask))
>       {
>       syslog(LOG_ERR, "Subnet %s/%s includes already excluded subnet, removing smaller entry", inet_ntoa(addr), inet_ntoa(addr2));
>       // Shift everything down
>       for (Counter2 = Counter; Counter2 < NotSubnetCount-1; Counter2++)
>         {
>         NotSubnetTable[Counter2].ip = NotSubnetTable[Counter2+1].ip;
>         NotSubnetTable[Counter2].mask = NotSubnetTable[Counter2+1].mask;
>         }
>       NotSubnetCount--;
>       Counter--; // Retest this entry because we replaced it
>       }
>     }
>   NotSubnetTable[NotSubnetCount].mask = mask;
>   NotSubnetTable[NotSubnetCount].ip = subnet;
>   NotSubnetCount++;
>   }
> 
687d761
< 
689d762
< 
692d764
< 	
699d770
< 
718c789
< 						return;					
---
> 						return;
737c808
< 					case 28864: // hotComm				
---
> 					case 28864: // hotComm
740c811
< 						return;	
---
> 						return;
757c828
< 	struct IPDataStore *PrevDataStore;	
---
> 	struct IPDataStore *PrevDataStore;
759d829
< 	
762d831
< 
776c845
< 				free(DataStore);												
---
> 				free(DataStore);
779c848
< 				}				
---
> 				}
794,795c863
< 
< 		PrevDataStore = DataStore;				
---
> 		PrevDataStore = DataStore;
805c873
< 		sqliteStoreIPData(IncData, extension_data);	
---
> 		sqliteStoreIPData(IncData, extension_data);
816d883
< 	
818d884
< 
820d885
< 
829c894
< 		fprintf(cdf, "%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu\n", Stats->total, Stats->icmp, Stats->udp, Stats->tcp, Stats->ftp, Stats->http, Stats->mail, Stats->p2p); 		
---
> 		fprintf(cdf, "%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu\n", Stats->total, Stats->icmp, Stats->udp, Stats->tcp, Stats->ftp, Stats->http, Stats->mail, Stats->p2p); 
838d902
< 
843d906
< 			
846d908
< 					
850d911
< 
853c914
< 		IPDataStore->FirstBlock->Next = NULL;																		
---
> 		IPDataStore->FirstBlock->Next = NULL;
860d920
< 
862d921
< 
869d927
< 
888d945
< 
891,892c948
< 				}						
< 
---
> 				}
901d956
< 				
904d958
< 					
910c964
< 				DataStore->Next->FirstBlock->Next = NULL;																		
---
> 				DataStore->Next->FirstBlock->Next = NULL;
912,913c966
< 	
< 			DataStore = DataStore->Next;			
---
> 			DataStore = DataStore->Next;
921d973
< 
935,936d986
< 
< 
940d989
< 
946c995,1001
< 
---
> #ifdef HAVE_PYTHON
> 	//Run python plugin script on IpTable
> 	Py_Initialize();
> 	initbandwidthd();
> 	iptable_Transform(IpCount);
> 	Py_Finalize();
> #endif
951d1005
< 
957d1010
< 
962d1014
< 
965d1016
< 
969c1020
< 			logname2[offset] = '4';			
---
> 			logname2[offset] = '4';
973c1024
< 			logname2[offset] = '3';			
---
> 			logname2[offset] = '3';
977c1028
< 			logname2[offset] = '2';			
---
> 			logname2[offset] = '2';
981c1032
< 			logname2[offset] = '1';			
---
> 			logname2[offset] = '1';
988d1038
< 
992d1041
< 
995,996c1044
< 			MayGraph = TRUE;				
< 
---
> 			MayGraph = TRUE;
1001d1048
< 
1004d1050
< 
1016d1061
< 
1043d1087
< 
1045d1088
< 
1062c1105
< 			return;	
---
> 			return;
1075a1119,1121
> #ifdef HAVE_PYTHON
> 	Py_Initialize();
> #endif
1087d1132
< 
1092d1136
< 
1095d1138
< 
1102c1145
< 			}			
---
> 			}
1106d1148
< 
1113c1155
< 			goto End_RecoverDataFromCdf;		
---
> 			goto End_RecoverDataFromCdf;
1115d1156
< 
1134d1174
< 
1136d1175
< 
1143d1181
< 	
1168c1206
< 	
---
> #ifndef HAVE_PYTHON
1172c1210,1224
< 	
---
> #else
> 	PyObject *oIP;
> 	PyObject *oCounter;
> 	oIP=PyInt_FromLong(ipaddr);
> 	Counter=PyDict_Contains(IpTableDict, oIP);
> 	if (Counter==-1){
> 		printf("PyDict_Contains had an error.\n");
> 		abort();
> 	}
> 	if (Counter){
> 		Counter=PyInt_AsLong(PyDict_GetItem(IpTableDict, oIP));
> 		Py_DECREF(oIP);
> 		return &IpTable[Counter];
> 	}
> #endif
1183c1235
< 	
---
> #ifndef HAVE_PYTHON
1185a1238,1245
> #else
> 	oCounter=PyInt_FromLong(IpCount);
>   IpTable[IpCount].ip = ipaddr;
>   PyDict_SetItem(IpTableDict, oIP, oCounter);
>   Py_DECREF(oCounter);
>   Py_DECREF(oIP);
>   return (&IpTable[IpCount++]);
> #endif
1188,1189d1247
< size_t ICGrandTotalDataPoints = 0;
< 
1194d1251
< 
1201d1257
< 
1211d1266
< 
1225d1279
< 
1228d1281
< 	
1231a1285,1320
> #ifdef HAVE_PYTHON
> void iptable_Transform(uint32_t Counter)
>   {
>   PyObject *pName, *pModule, *pFunc;
>   PyObject *pArgs, *pValue;
>   pName = PyString_FromString("LookupMac");
>   PyRun_SimpleString("import sys\nsys.path.append('.')\n");
>   pModule = PyImport_Import(pName);
>   Py_DECREF(pName);
>   if (pModule != NULL)
>     {
>     pFunc = PyObject_GetAttrString(pModule, "main");
>     if (pFunc && PyCallable_Check(pFunc))
>       {
>       pArgs= PyTuple_New(1);
>       PyTuple_SetItem(pArgs, 0, PyLong_FromUnsignedLong(Counter));
>       pValue = PyObject_CallObject(pFunc, pArgs);
>       Py_DECREF(pArgs);
>       if (pValue != NULL)
>         {
>         printf("Result of call: %s\n", PyString_AsString(pValue));
>         Py_DECREF(pValue);
>         }
>       else
>         {
>         Py_DECREF(pFunc);
>         Py_DECREF(pModule);
>         PyErr_Print();
>         fprintf(stderr,"Call failed\n");
>         Py_Finalize();
>         return;
>         }
>       }
>     }
>   return;
>   }
1232a1322,1393
> static PyObject *bandwidthd_get_entry_as_dict(PyObject *self, PyObject* args)
> {
>   uint32_t iCounter;
>   struct IPData ip_entry;
>   if (!PyArg_ParseTuple(args, "k", &iCounter))
>     return NULL;
>   ip_entry=IpTable[iCounter];
>   return Py_BuildValue("{s:k,s:s,s:l,s:{s:K,s:K,s:K,s:K,s:K,s:K,s:K,s:K,s:K},s:{s:K,s:K,s:K,s:K,s:K,s:K,s:K,s:K,s:K}}",
>     "ip"    , ip_entry.ip,
>     "mac"    , ip_entry.mac,
>     "timestamp" , ip_entry.timestamp,
>     "send"    ,
>     "total"  , ip_entry.Send.total,
>     "tcp"    , ip_entry.Send.tcp,
>     "udp"    , ip_entry.Send.udp,
>     "p2p"    , ip_entry.Send.p2p,
>     "mail"    , ip_entry.Send.mail,
>     "icmp"    , ip_entry.Send.icmp,
>     "http"    , ip_entry.Send.http,
>     "ftp"    , ip_entry.Send.ftp,
>     "packets"   , ip_entry.Send.packet_count,
>     "receive"   ,
>     "total"  , ip_entry.Receive.total,
>     "tcp"    , ip_entry.Receive.tcp,
>     "udp"    , ip_entry.Receive.udp,
>     "p2p"    , ip_entry.Receive.p2p,
>     "mail"    , ip_entry.Receive.mail,
>     "icmp"    , ip_entry.Receive.icmp,
>     "http"    , ip_entry.Receive.http,
>     "ftp"    , ip_entry.Receive.ftp,
>     "packets"   , ip_entry.Receive.packet_count
>     );
> }
> static PyObject *bandwidthd_set_entry_by_dict(PyObject *self, PyObject* args)
> {
> #if 0
>   uint32_t iCounter;
>   int *len;
>   char *mac;
>   struct IPData ip_entry;
>   if (!PyArg_ParseTuple(args,
>    "k(ks#lKKKKKKKKKKKKKKKKKK)", &iCounter, &ip_entry.ip, &mac,&len, &ip_entry.timestamp, &ip_entry.Send.total, &ip_entry.Send.tcp, &ip_entry.Send.udp, &ip_entry.Send.p2p, &ip_entry.Send.mail, &ip_entry.Send.icmp, &ip_entry.Send.http, &ip_entry.Send.ftp, &ip_entry.Send.packet_count, &ip_entry.Receive.total, &ip_entry.Receive.tcp, &ip_entry.Receive.udp, &ip_entry.Receive.p2p, &ip_entry.Receive.mail, &ip_entry.Receive.icmp, &ip_entry.Receive.http, &ip_entry.Receive.ftp, &ip_entry.Receive.packet_count))
>     return NULL;
>   strncpy(IpTable[iCounter].mac[0], mac, 17);
>   IpTable[iCounter].mac[0][17] = '\0';
>   printf("ip: %i\nnew_ip: %i\n", IpTable[iCounter].ip,ip_entry.ip);
>   return Py_BuildValue("s",IpTable[iCounter].mac[0]);
> #else
>   uint32_t iCounter;
>   int *len;
>   char *mac;
>   if (!PyArg_ParseTuple(args, "ks#", &iCounter, &mac,&len))
>      return NULL;
>   strncpy(IpTable[iCounter].mac[0], mac, 17);
>   IpTable[iCounter].mac[0][17] = '\0';
>   return Py_BuildValue("s",IpTable[iCounter].mac[0]);
> #endif
> }
> 
> 
> static PyMethodDef bandwidthd_methods[] = {
>   {"get_entry",      bandwidthd_get_entry_as_dict,    METH_VARARGS, "Return dictionary of IpTable entry for the given ip and timestamp."},
>   {"set_entry",      bandwidthd_set_entry_by_dict,    METH_VARARGS, "Set dictionary of IpTable entry for the given ip and timestamp."},
>   {NULL,        NULL}      /* sentinel */
> };
> 
> void initbandwidthd(void)
> {
>   PyImport_AddModule("bandwidthd");
>   Py_InitModule("bandwidthd", bandwidthd_methods);
> }
> #endif //HAVE_PYTHON
diff -r ../../branches/bandwidthd.IPv4/bandwidthd.h ./bandwidthd.h
4a5,8
> #ifdef HAVE_PYTHON
> #include <Python.h>
> #endif
> 
71c75
< #define IP_NUM 10000			// TODO: Do this dynamicly to save ram and/or scale bigger
---
> #define IP_NUM 256*256			// TODO: Do this dynamicly to save ram and/or scale bigger
86c90
< #define INTERVAL1 200L		// 150 -60 (213 is the perfect interval?)
---
> #define INTERVAL1 20L		// 150 -60 (213 is the perfect interval?)
156a161
> 	char *mac[1][20];
174c179
< 	unsigned long long MAIL;	
---
> 	unsigned long long MAIL;
180c185
< 	uint32_t ip;	
---
> 	uint32_t ip;
195a201,219
> struct Broadcast
>   {
>   char *sensor_name;
>   char *interface;
>   time_t received;
> 
>   struct Broadcast *next;
>   };
> 
> // Vlan header
> 
> struct VlanHeader
> {
>   u_int8_t  ether_dhost[6];  /* destination eth addr */
>   u_int8_t  ether_shost[6];  /* source ether addr  */
>   u_int8_t  ether_type[2];   /* packet type ID field */
>   u_int8_t  vlan_tag[2];     /* vlan tag information */
> } __attribute__ ((__packed__));
> 
217a242
> 
253a279,322
> // ************ Python
> #ifdef HAVE_PYTHON
> void iptable_Transform(uint32_t Counter);
> void initbandwidthd(void);
> #endif
> 
> 
> // ** Global Variables
> 
> #define SNAPLEN 100
> 
> /*
> static pcap_t *pd;
> unsigned int GraphIntervalCount = 0;
> unsigned int IpCount = 0;
> unsigned int SubnetCount = 0;
> unsigned int NotSubnetCount = 0;
> int IntervalFinished = FALSE;
> time_t IntervalStart;
> time_t ProgramStart;
> int RotateLogs = FALSE;
> int PacketCallbackLock = 0;
> pid_t pidGraphingChild = 0;
> struct SubnetData SubnetTable[SUBNET_NUM];
> struct SubnetData NotSubnetTable[SUBNET_NUM];
> struct IPData IpTable[IP_NUM];
> size_t ICGrandTotalDataPoints = 0;
> 
> #ifdef HAVE_PYTHON
> PyObject *IpTableDict;
> #endif
> 
> int DataLink;
> int IP_Offset;
> struct IPDataStore *IPDataStore = NULL;
> extern int bdconfig_parse(void);
> void BroadcastState(int fd);
> extern FILE *bdconfig_in;
> struct config config;
> struct Broadcast *Broadcasts = NULL;
> pid_t workerchildpids[NR_WORKER_CHILDS];
> void ResetTrafficCounters(void);
> void CloseInterval(void);
> */
diff -r ../../branches/bandwidthd.IPv4/conf.l ./conf.l
10,12c10,12
< [ \t]+      			/* Ignore */;
< \n						{ return TOKNEWLINE; }
< #.*\n        			{ return TOKNEWLINE; }
---
> [ \t]+            /* Ignore */;
> \n            { return TOKNEWLINE; }
> #.*\n              { return TOKNEWLINE; }
14,16c14,16
< [-0-9]+					{ bdconfig_lval.number=atoi(yytext); return NUMBER; }
< \".*\"					{ bdconfig_lval.string=strdup(yytext); return STRING; }
< \/						{ return TOKSLASH; }
---
> [-0-9]+          { bdconfig_lval.number=atoi(yytext); return NUMBER; }
> \".*\"          { bdconfig_lval.string=strdup(yytext); return STRING; }
> \/            { return TOKSLASH; }
18,36c18,37
< subnet					{ return TOKSUBNET; }
< dev						{ return TOKDEV; }
< skip_intervals			{ return TOKSKIPINTERVALS; }
< graph_cutoff			{ return TOKGRAPHCUTOFF; }
< promiscuous				{ return TOKPROMISC; }
< output_cdf				{ return TOKOUTPUTCDF; }		
< recover_cdf				{ return TOKRECOVERCDF; }		
< graph					{ return TOKGRAPH; }
< filter					{ return TOKFILTER; }
< meta_refresh			{ return TOKMETAREFRESH; }
< pgsql_connect_string	{ return TOKPGSQLCONNECTSTRING; }
< sqlite_filename			{ return TOKSQLITEFILENAME; }
< sensor_id				{ return TOKSENSORID; }
< htdocs_dir				{ return TOKHTDOCSDIR; }
< log_dir					{ return TOKLOGDIR; }
< description				{ return TOKDESCRIPTION; }
< management_url			{ return TOKMANAGEMENTURL; }
< extensions				{ return TOKEXTENSIONS; }
< .						{ return TOKJUNK; }
---
> subnet          { return TOKSUBNET; }
> notsubnet         { return TOKNOTSUBNET; }
> dev            { return TOKDEV; }
> skip_intervals      { return TOKSKIPINTERVALS; }
> graph_cutoff      { return TOKGRAPHCUTOFF; }
> promiscuous        { return TOKPROMISC; }
> output_cdf        { return TOKOUTPUTCDF; }    
> recover_cdf        { return TOKRECOVERCDF; }    
> graph          { return TOKGRAPH; }
> filter          { return TOKFILTER; }
> meta_refresh      { return TOKMETAREFRESH; }
> pgsql_connect_string  { return TOKPGSQLCONNECTSTRING; }
> sqlite_filename      { return TOKSQLITEFILENAME; }
> sensor_id        { return TOKSENSORID; }
> htdocs_dir        { return TOKHTDOCSDIR; }
> log_dir          { return TOKLOGDIR; }
> description        { return TOKDESCRIPTION; }
> management_url      { return TOKMANAGEMENTURL; }
> extensions        { return TOKEXTENSIONS; }
> .            { return TOKJUNK; }
diff -r ../../branches/bandwidthd.IPv4/conf.y ./conf.y
14a15
> extern unsigned int NotSubnetCount;
15a17
> extern struct SubnetData NotSubnetTable[];
23,25c25,27
<     fprintf(stderr, "Syntax Error \"%s\" on line %d\n", str, LineNo);
< 	syslog(LOG_ERR, "Syntax Error \"%s\" on line %d", str, LineNo);
< 	exit(1);
---
>     fprintf(stderr, "Syntax Error \"%s\" on line %d in bandwidthd.conf\n", str, LineNo);
>   syslog(LOG_ERR, "Syntax Error \"%s\" on line %d in bandwidthd.conf", str, LineNo);
>   exit(1);
29,31c31,33
< 	{
< 	return(1);
< 	}
---
>   {
>   return(1);
>   }
34c36
< %token TOKJUNK TOKSUBNET TOKDEV TOKSLASH TOKSKIPINTERVALS TOKGRAPHCUTOFF TOKDESCRIPTION
---
> %token TOKJUNK TOKSUBNET TOKNOTSUBNET TOKDEV TOKSLASH TOKSKIPINTERVALS TOKGRAPHCUTOFF TOKDESCRIPTION
56,93c58,97
< 	subnet
< 	|
< 	device
< 	|
< 	skip_intervals
< 	|
< 	graph_cutoff
< 	|
< 	promisc
< 	|
< 	extensions
< 	|
< 	output_cdf
< 	|
< 	recover_cdf
< 	|
< 	graph
< 	|
< 	newline
< 	|
< 	filter
< 	|
< 	meta_refresh
< 	|
< 	pgsql_connect_string
< 	|
< 	sensor_name
< 	|
< 	htdocs_dir
< 	|
< 	log_dir
< 	|
< 	description
< 	|
< 	management_url
< 	|
< 	sqlite_filename
< 	;
---
>   subnet
>   |
>   notsubnet
>   |
>   device
>   |
>   skip_intervals
>   |
>   graph_cutoff
>   |
>   promisc
>   |
>   extensions
>   |
>   output_cdf
>   |
>   recover_cdf
>   |
>   graph
>   |
>   newline
>   |
>   filter
>   |
>   meta_refresh
>   |
>   pgsql_connect_string
>   |
>   sensor_name
>   |
>   htdocs_dir
>   |
>   log_dir
>   |
>   description
>   |
>   management_url
>   |
>   sqlite_filename
>   ;
96,99c100,103
< 	subneta
< 	|
< 	subnetb
< 	;
---
>   subneta
>   |
>   subnetb
>   ;
102,106c106,160
< 	TOKNEWLINE
< 	{
< 	LineNo++;
< 	}
< 	;
---
>   TOKNEWLINE
>   {
>   LineNo++;
>   }
>   ;
> 
> notsubnet:
>   notsubneta
>   |
>   notsubnetb
>   ;
> 
> notsubneta:
>   TOKNOTSUBNET IPADDR IPADDR
>   {
>   //struct in_addr addr, addr2;
> 
>   IgnoreMonitorSubnet(inet_network($2), inet_network($3));
> 
>   /*
>   NotSubnetTable[NotSubnetCount].ip = inet_network($2) & inet_network($3);
>       NotSubnetTable[NotSubnetCount].mask = inet_network($3);
> 
>   addr.s_addr = ntohl(NotSubnetTable[NotSubnetCount].ip);
>   addr2.s_addr = ntohl(NotSubnetTable[NotSubnetCount++].mask);
>   syslog(LOG_INFO, "Ignoring subnet %s with netmask %s", inet_ntoa(addr), inet_ntoa(addr2));
>   */
>   }
>   ;
> 
> notsubnetb:
>   TOKNOTSUBNET IPADDR TOKSLASH NUMBER
>   {
>   unsigned int Subnet, Counter, Mask;
>   //struct in_addr addr, addr2;
> 
>   Mask = 1; Mask <<= 31;
>   for (Counter = 0, Subnet = 0; Counter < $4; Counter++)
>     {
>     Subnet >>= 1;
>     Subnet |= Mask;
>     }
> 
>   IgnoreMonitorSubnet(inet_network($2), Subnet);
> 
>   /*
>   NotSubnetTable[NotSubnetCount].mask = Subnet;
>   NotSubnetTable[NotSubnetCount].ip = inet_network($2) & Subnet;
>   addr.s_addr = ntohl(NotSubnetTable[NotSubnetCount].ip);
>   addr2.s_addr = ntohl(NotSubnetTable[NotSubnetCount++].mask);
>   syslog(LOG_INFO, "Ignoring subnet %s with netmask %s", inet_ntoa(addr), inet_ntoa(addr2));
>   */
>   }
>   ;
> 
109,124c163,178
< 	TOKSUBNET IPADDR IPADDR
< 	{
< 	//struct in_addr addr, addr2;
< 	
< 	MonitorSubnet(inet_network($2), inet_network($3));
< 
< 	/*
< 	SubnetTable[SubnetCount].ip = inet_network($2) & inet_network($3);
<     	SubnetTable[SubnetCount].mask = inet_network($3);	
< 
< 	addr.s_addr = ntohl(SubnetTable[SubnetCount].ip);
< 	addr2.s_addr = ntohl(SubnetTable[SubnetCount++].mask);
< 	syslog(LOG_INFO, "Monitoring subnet %s with netmask %s", inet_ntoa(addr), inet_ntoa(addr2));
< 	*/
< 	}
< 	;
---
>   TOKSUBNET IPADDR IPADDR
>   {
>   //struct in_addr addr, addr2;
>   
>   MonitorSubnet(inet_network($2), inet_network($3));
> 
>   /*
>   SubnetTable[SubnetCount].ip = inet_network($2) & inet_network($3);
>       SubnetTable[SubnetCount].mask = inet_network($3);  
> 
>   addr.s_addr = ntohl(SubnetTable[SubnetCount].ip);
>   addr2.s_addr = ntohl(SubnetTable[SubnetCount++].mask);
>   syslog(LOG_INFO, "Monitoring subnet %s with netmask %s", inet_ntoa(addr), inet_ntoa(addr2));
>   */
>   }
>   ;
127,148c181,202
< 	TOKSUBNET IPADDR TOKSLASH NUMBER
< 	{
< 	unsigned int Subnet, Counter, Mask;
< 	//struct in_addr addr, addr2;
< 
< 	Mask = 1; Mask <<= 31;
< 	for (Counter = 0, Subnet = 0; Counter < $4; Counter++)
< 		{
< 		Subnet >>= 1;
< 		Subnet |= Mask;
< 		}
< 
< 	MonitorSubnet(inet_network($2), Subnet);
< 
< 	/* 	SubnetTable[SubnetCount].mask = Subnet; 
< 	SubnetTable[SubnetCount].ip = inet_network($2) & Subnet;
< 	addr.s_addr = ntohl(SubnetTable[SubnetCount].ip);
< 	addr2.s_addr = ntohl(SubnetTable[SubnetCount++].mask);
< 	syslog(LOG_INFO, "Monitoring subnet %s with netmask %s", inet_ntoa(addr), inet_ntoa(addr2));
< 	*/
< 	}
< 	;
---
>   TOKSUBNET IPADDR TOKSLASH NUMBER
>   {
>   unsigned int Subnet, Counter, Mask;
>   //struct in_addr addr, addr2;
> 
>   Mask = 1; Mask <<= 31;
>   for (Counter = 0, Subnet = 0; Counter < $4; Counter++)
>     {
>     Subnet >>= 1;
>     Subnet |= Mask;
>     }
> 
>   MonitorSubnet(inet_network($2), Subnet);
> 
>   /*   SubnetTable[SubnetCount].mask = Subnet; 
>   SubnetTable[SubnetCount].ip = inet_network($2) & Subnet;
>   addr.s_addr = ntohl(SubnetTable[SubnetCount].ip);
>   addr2.s_addr = ntohl(SubnetTable[SubnetCount++].mask);
>   syslog(LOG_INFO, "Monitoring subnet %s with netmask %s", inet_ntoa(addr), inet_ntoa(addr2));
>   */
>   }
>   ;
159,163c213,217
< 	TOKDEV string
< 	{
< 	config.dev = $2;
< 	}
< 	;
---
>   TOKDEV string
>   {
>   config.dev = $2;
>   }
>   ;
166,170c220,224
< 	TOKMANAGEMENTURL string
< 	{
< 	config.management_url = $2;
< 	}
< 	;
---
>   TOKMANAGEMENTURL string
>   {
>   config.management_url = $2;
>   }
>   ;
173,177c227,231
< 	TOKDESCRIPTION string
< 	{
< 	config.description = $2;
< 	}
< 	;
---
>   TOKDESCRIPTION string
>   {
>   config.description = $2;
>   }
>   ;
180,184c234,238
< 	TOKHTDOCSDIR string
< 	{
< 	config.htdocs_dir = $2;
< 	}
< 	;
---
>   TOKHTDOCSDIR string
>   {
>   config.htdocs_dir = $2;
>   }
>   ;
187,191c241,245
< 	TOKLOGDIR string
< 	{
< 	config.log_dir = $2;
< 	}
< 	;
---
>   TOKLOGDIR string
>   {
>   config.log_dir = $2;
>   }
>   ;
194,198c248,252
< 	TOKFILTER string
< 	{
< 	config.filter = $2;
< 	}
< 	;
---
>   TOKFILTER string
>   {
>   config.filter = $2;
>   }
>   ;
201,205c255,259
< 	TOKMETAREFRESH NUMBER
< 	{
< 	config.meta_refresh = $2;
< 	}
< 	;
---
>   TOKMETAREFRESH NUMBER
>   {
>   config.meta_refresh = $2;
>   }
>   ;
208,212c262,266
< 	TOKSKIPINTERVALS NUMBER
< 	{
< 	config.skip_intervals = $2+1;
< 	}
< 	;
---
>   TOKSKIPINTERVALS NUMBER
>   {
>   config.skip_intervals = $2+1;
>   }
>   ;
215,219c269,273
< 	TOKGRAPHCUTOFF NUMBER
< 	{
< 	config.graph_cutoff = $2*1024;
< 	}
< 	;
---
>   TOKGRAPHCUTOFF NUMBER
>   {
>   config.graph_cutoff = $2*1024;
>   }
>   ;
222,226c276,280
< 	TOKPROMISC STATE
< 	{
< 	config.promisc = $2;
< 	}
< 	;
---
>   TOKPROMISC STATE
>   {
>   config.promisc = $2;
>   }
>   ;
229,233c283,287
< 	TOKEXTENSIONS STATE
< 	{
< 	config.extensions = $2;
< 	}
< 	;
---
>   TOKEXTENSIONS STATE
>   {
>   config.extensions = $2;
>   }
>   ;
236,240c290,294
< 	TOKOUTPUTCDF STATE
< 	{
< 	config.output_cdf = $2;
< 	}
< 	;
---
>   TOKOUTPUTCDF STATE
>   {
>   config.output_cdf = $2;
>   }
>   ;
243,247c297,301
< 	TOKRECOVERCDF STATE
< 	{
< 	config.recover_cdf = $2;
< 	}
< 	;
---
>   TOKRECOVERCDF STATE
>   {
>   config.recover_cdf = $2;
>   }
>   ;
250,254c304,308
< 	TOKGRAPH STATE
< 	{
< 	config.graph = $2;
< 	}
< 	;
---
>   TOKGRAPH STATE
>   {
>   config.graph = $2;
>   }
>   ;
260c314
< 	config.output_database = DB_PGSQL;
---
>   config.output_database = DB_PGSQL;
265,270c319,324
< 	TOKSQLITEFILENAME string
< 	{
< 	config.db_connect_string = $2;
< 	config.output_database = DB_SQLITE;
< 	}
< 	;
---
>   TOKSQLITEFILENAME string
>   {
>   config.db_connect_string = $2;
>   config.output_database = DB_SQLITE;
>   }
>   ;
diff -r ../../branches/bandwidthd.IPv4/configure.in ./configure.in
10,11c10,11
< RELEASE_VERSION=0
< EXTRA_VERSION=""
---
> RELEASE_VERSION=2
> EXTRA_VERSION=".IPv6"
20a21,44
> 
> 
> use_pgsql=no
> AC_PATH_PROG(PG_CONFIG, pg_config)
> 
> 
> if test x$enable_pgsql = xyes ; then
>   if test "x$PG_CONFIG" = "x" ; then
>     echo "*** Couldn't find pg_config. Disabling PostgreSQL support."
>   else
>     LDFLAGS="$LDFLAGS -L`$PG_CONFIG --libdir` -lpq"
> 
>     pgsql_cflags=`$PG_CONFIG --includedir`
>     if test "x$pgsql_cflags" != "x/usr/include" ; then
>       CPPFLAGS="$CPPFLAGS -I$pgsql_cflags"
>     fi
>      
>     use_pgsql=yes
>     AC_DEFINE(HAVE_LIBPQ, 1, "Enable PostgreSQL compiletime option")
>   fi
> fi
> 
> 
> 
137a162,227
> 
> AC_ARG_ENABLE([pgsql], AC_HELP_STRING([--enable-pgsql],
> 	[Enable PostgreSQL support. Default is yes, if available.]),
> 	enable_pgsql="$enableval", enable_pgsql=yes)
> 
> 
> 
> AC_ARG_ENABLE([python], AC_HELP_STRING([--enable-python],
> 	[Enable Python support. Default is yes, if available.]),
> 	enable_python="$enableval", enable_python=yes)
> 
> HAVEPYTHON=0
> if test $enable_python != "no" ; then
> 	if test -n HAVEPYTHON && test `which python2.7-config` != "" ; then
> 		PYTHON=`which python2.7`
> 		LDFLAGS="$LDFLAGS `python2.7-config --libs`"
> 		CPPFLAGS="$CPPFLAGS `python2.7-config --includes`"
> 		PYTHON_VERSION="2.7"
> 		HAVEPYTHON=1
> 		echo "checking for python2.7... yes"
> 	else
> 		echo "checking for python2.7... no"
> 		if test -n HAVEPYTHON && test `which python2.6-config` != "" ; then
> 			PYTHON=`which python2.6`
> 			LDFLAGS="$LDFLAGS `python2.6-config --libs`"
> 			CPPFLAGS="$CPPFLAGS `python2.6-config --includes`"
> 			PYTHON_VERSION="2.6"
> 			HAVEPYTHON=1
> 			echo echo "checking for python2.6... yes"
> 		else
> 			echo "checking for python2.6... no"
> 	
> 			if test -n HAVEPYTHON && test `which python2.5-config` != "" ; then
> 				PYTHON=`which python2.5`
> 				LDFLAGS="$LDFLAGS `python5-config --libs`"
> 				CPPFLAGS="$CPPFLAGS `python5-config --includes`"
> 				PYTHON_VERSION="2.5"
> 				HAVEPYTHON=1
> 				echo echo "checking for python2.5... yes"
> 			else
> 				echo "checking for python2.5... no"
> 	
> 				if test -n HAVEPYTHON && test `which python-config` != "" ; then
> 					PYTHON=`which python`
> 					LDFLAGS="$LDFLAGS `python-config --libs`"
> 					CPPFLAGS="$CPPFLAGS `python-config --includes`"
> 					PYTHON_VERSION=`$PYTHON -c "import sys; \
> 									print sys.version[[:3]]"`
> 					HAVEPYTHON=1
> 					echo "checking for python... $PYTHON_VERSION"
> 					AC_MSG_WARN([Python version not supported, but using anyway])
> 				else
> 					echo "checking for python... no"
> 				fi
> 			fi
> 		fi
> 	fi
> fi
> 
> 
> if test "$HAVEPYTHON" = "1" ; then
> 	AC_DEFINE_UNQUOTED(HAVE_PYTHON, 1, "Enable Python compiletime option")
> 	AC_DEFINE_UNQUOTED(PYTHON_VERSION, $PYTHON_VERSION, "Set version of python")
> fi
> 
> 
diff -r ../../branches/bandwidthd.IPv4/etc/.svn/entries ./etc/.svn/entries
5c5
< svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/branches/bandwidthd.IPv4/etc
---
> svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/trunk/bandwidthd/etc
38c38
< 2012-10-15T20:41:22.088773Z
---
> 2012-10-15T20:42:03.985094Z
diff -r ../../branches/bandwidthd.IPv4/etc/CVS/.svn/entries ./etc/CVS/.svn/entries
5c5
< svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/branches/bandwidthd.IPv4/etc/CVS
---
> svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/trunk/bandwidthd/etc/CVS
29c29
< Root
---
> Repository
35,36c35,36
< 2012-10-15T20:41:22.088773Z
< 6d7c5bc5fe29be693c14e58d46d38d74
---
> 2012-10-15T20:42:03.985094Z
> 63d7fc041e4f39952c8a78dece7d56c6
61c61
< 70
---
> 15
63c63
< Entries
---
> Root
69,70c69,70
< 2012-10-15T20:41:22.088773Z
< a8411105e416b8eaf46b072d12031cb1
---
> 2012-10-15T20:42:03.985094Z
> 6d7c5bc5fe29be693c14e58d46d38d74
95c95
< 50
---
> 70
97c97
< Repository
---
> Entries
103,104c103,104
< 2012-10-15T20:41:22.088773Z
< 63d7fc041e4f39952c8a78dece7d56c6
---
> 2012-10-15T20:42:03.985094Z
> a8411105e416b8eaf46b072d12031cb1
129c129
< 15
---
> 50
diff -r ../../branches/bandwidthd.IPv4/extensions/.svn/entries ./extensions/.svn/entries
5c5
< svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/branches/bandwidthd.IPv4/extensions
---
> svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/trunk/bandwidthd/extensions
29c29,32
< uptime
---
> CVS
> dir
> 
> errors
35,36c38,39
< 2012-10-15T20:41:22.104773Z
< 7c1390d6b5d1b478f9e4826f7f33413e
---
> 2012-10-15T20:42:03.989094Z
> 8bb5770bfea50b85642dee784e46b911
61,64c64
< 50
< 
< CVS
< dir
---
> 52
66c66
< errors
---
> signal
72,73c72,73
< 2012-10-15T20:41:22.104773Z
< 8bb5770bfea50b85642dee784e46b911
---
> 2012-10-15T20:42:03.985094Z
> b727eb360847c5a9a674c2b255c4863a
98c98
< 52
---
> 92
100c100
< signal
---
> loadavg
106,107c106,107
< 2012-10-15T20:41:22.092773Z
< b727eb360847c5a9a674c2b255c4863a
---
> 2012-10-15T20:42:03.989094Z
> 9ac5e8e8de01029b643579b0e5419970
132c132
< 92
---
> 51
134c134
< loadavg
---
> wireless
140,141c140,141
< 2012-10-15T20:41:22.104773Z
< 9ac5e8e8de01029b643579b0e5419970
---
> 2012-10-15T20:42:03.989094Z
> d310a3e52435b9a74e174aeb11447007
166c166
< 51
---
> 25
168c168
< wireless
---
> uptime
174,175c174,175
< 2012-10-15T20:41:22.104773Z
< d310a3e52435b9a74e174aeb11447007
---
> 2012-10-15T20:42:03.989094Z
> 7c1390d6b5d1b478f9e4826f7f33413e
200c200
< 25
---
> 50
diff -r ../../branches/bandwidthd.IPv4/extensions/CVS/.svn/entries ./extensions/CVS/.svn/entries
5c5
< svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/branches/bandwidthd.IPv4/extensions/CVS
---
> svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/trunk/bandwidthd/extensions/CVS
29c29
< Repository
---
> Root
35,36c35,36
< 2012-10-15T20:41:22.104773Z
< f852cb38bc8e13dde59363597f98a2fa
---
> 2012-10-15T20:42:03.989094Z
> 6d7c5bc5fe29be693c14e58d46d38d74
61c61
< 22
---
> 70
63c63
< Root
---
> Entries
69,70c69,70
< 2012-10-15T20:41:22.104773Z
< 6d7c5bc5fe29be693c14e58d46d38d74
---
> 2012-10-15T20:42:03.989094Z
> e3daf68f8d880b726244c5d0df30671a
95c95
< 70
---
> 200
97c97
< Entries
---
> Repository
103,104c103,104
< 2012-10-15T20:41:22.104773Z
< e3daf68f8d880b726244c5d0df30671a
---
> 2012-10-15T20:42:03.989094Z
> f852cb38bc8e13dde59363597f98a2fa
129c129
< 200
---
> 22
diff -r ../../branches/bandwidthd.IPv4/htdocs/.svn/entries ./htdocs/.svn/entries
5c5
< svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/branches/bandwidthd.IPv4/htdocs
---
> svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/trunk/bandwidthd/htdocs
38c38
< 2012-10-15T20:41:22.380775Z
---
> 2012-10-15T20:42:03.997094Z
72c72
< 2012-10-15T20:41:22.380775Z
---
> 2012-10-15T20:42:03.997094Z
diff -r ../../branches/bandwidthd.IPv4/htdocs/CVS/.svn/entries ./htdocs/CVS/.svn/entries
5c5
< svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/branches/bandwidthd.IPv4/htdocs/CVS
---
> svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/trunk/bandwidthd/htdocs/CVS
29c29
< Entries
---
> Root
35,36c35,36
< 2012-10-15T20:41:22.368775Z
< 66b74c172ea4243baa116cebeb69223a
---
> 2012-10-15T20:42:03.997094Z
> 6d7c5bc5fe29be693c14e58d46d38d74
61c61
< 100
---
> 70
63c63
< Repository
---
> Entries
69,70c69,70
< 2012-10-15T20:41:22.368775Z
< 2c187795656a9cd993f528582e418f30
---
> 2012-10-15T20:42:03.997094Z
> 66b74c172ea4243baa116cebeb69223a
95c95
< 18
---
> 100
97c97
< Root
---
> Repository
103,104c103,104
< 2012-10-15T20:41:22.368775Z
< 6d7c5bc5fe29be693c14e58d46d38d74
---
> 2012-10-15T20:42:03.997094Z
> 2c187795656a9cd993f528582e418f30
129c129
< 70
---
> 18
diff -r ../../branches/bandwidthd.IPv4/pgsql.c ./pgsql.c
5a6
> extern struct Broadcast *Broadcasts;
34c35
< 		res = PQexec(conn,	"CREATE TABLE bd_rx_log (sensor_id int, ip inet, timestamp timestamp with time zone DEFAULT now(), sample_duration int, packet_count int, total int, icmp int, udp int, tcp int, ftp int, http int, mail int, p2p int); create index bd_rx_log_sensor_id_ip_timestamp_idx on bd_rx_log (sensor_id, ip, timestamp); create index bd_rx_log_sensor_id_timestamp_idx on bd_rx_log(sensor_id, timestamp);");
---
> 		res = PQexec(conn,  "CREATE TABLE bd_rx_log (sensor_id int,mac character varying(20), ip inet, timestamp timestamp with time zone DEFAULT now(), sample_duration int, packet_count int, total int, icmp int, udp int, tcp int, ftp int, http int, mail int, p2p int); create index bd_rx_log_sensor_id_ip_timestamp_idx on bd_rx_log (sensor_id, ip, timestamp); create index bd_rx_log_sensor_id_timestamp_idx on bd_rx_log(sensor_id, timestamp);");
44c45
< 		res = PQexec(conn, "CREATE TABLE bd_tx_log (sensor_id int, ip inet, timestamp timestamp with time zone DEFAULT now(), sample_duration int, packet_count int, total int, icmp int, udp int, tcp int, ftp int, http int, mail int, p2p int); create index bd_tx_log_sensor_id_ip_timestamp_idx on bd_tx_log (sensor_id, ip, timestamp); create index bd_tx_log_sensor_id_timestamp_idx on bd_tx_log(sensor_id, timestamp);");
---
> 		res = PQexec(conn, "CREATE TABLE bd_tx_log (sensor_id int,mac character varying(20), ip inet, timestamp timestamp with time zone DEFAULT now(), sample_duration int, packet_count int, total int, icmp int, udp int, tcp int, ftp int, http int, mail int, p2p int); create index bd_tx_log_sensor_id_ip_timestamp_idx on bd_tx_log (sensor_id, ip, timestamp); create index bd_tx_log_sensor_id_timestamp_idx on bd_tx_log(sensor_id, timestamp);");
54c55
< 		res = PQexec(conn, "CREATE TABLE bd_rx_total_log (sensor_id int, ip inet, timestamp timestamp with time zone DEFAULT now(), sample_duration int, packet_count int, total int, icmp int, udp int, tcp int, ftp int, http int, mail int, p2p int); create index bd_rx_total_log_sensor_id_timestamp_ip_idx on bd_rx_total_log (sensor_id, timestamp);");
---
> 		res = PQexec(conn, "CREATE TABLE bd_rx_total_log (sensor_id int,mac character varying(20), ip inet, timestamp timestamp with time zone DEFAULT now(), sample_duration int, packet_count int, total int, icmp int, udp int, tcp int, ftp int, http int, mail int, p2p int); create index bd_rx_total_log_sensor_id_timestamp_ip_idx on bd_rx_total_log (sensor_id, timestamp);");
64c65
< 		res = PQexec(conn, "CREATE TABLE bd_tx_total_log (sensor_id int, ip inet, timestamp timestamp with time zone DEFAULT now(), sample_duration int, packet_count int, total int, icmp int, udp int, tcp int, ftp int, http int, mail int, p2p int); create index bd_tx_total_log_sensor_id_timestamp_ip_idx on bd_tx_total_log (sensor_id, timestamp);");
---
> 		res = PQexec(conn, "CREATE TABLE bd_tx_total_log (sensor_id int,mac character varying(20), ip inet, timestamp timestamp with time zone DEFAULT now(), sample_duration int, packet_count int, total int, icmp int, udp int, tcp int, ftp int, http int, mail int, p2p int); create index bd_tx_total_log_sensor_id_timestamp_ip_idx on bd_tx_total_log (sensor_id, timestamp);");
83a85,93
> 		res = PQexec(conn, "CREATE TABLE links (id1 int, id2 int, plot boolean default TRUE, last_update timestamp with time zone);");
> 		if (PQresultStatus(res) != PGRES_COMMAND_OK)
> 			{
> 			syslog(LOG_ERR, "Postresql create table links failed: %s", PQerrorMessage(conn));
> 			PQclear(res);
> 			PQfinish(conn);
> 			return(NULL);
> 			}
> 		PQclear(res);
105c115,174
< 			res = PQexec(conn,	"alter table bd_rx_log add column mail int;");
---
> 			res = PQexec(conn,  "alter table bd_rx_log add column mail int;");
> 			if (PQresultStatus(res) != PGRES_COMMAND_OK)
> 				{
> 				syslog(LOG_ERR, "Add column failed: %s", PQerrorMessage(conn));
> 				PQclear(res);
> 				PQfinish(conn);
> 				return(NULL);
> 				}
> 			PQclear(res);
> 
> 			res = PQexec(conn,  "alter table bd_tx_log add column mail int;");
> 			if (PQresultStatus(res) != PGRES_COMMAND_OK)
> 				{
> 				syslog(LOG_ERR, "Add column failed: %s", PQerrorMessage(conn));
> 				PQclear(res);
> 				PQfinish(conn);
> 				return(NULL);
> 				}
> 			PQclear(res);
> 
> 			res = PQexec(conn,  "alter table bd_rx_total_log add column mail int;");
> 			if (PQresultStatus(res) != PGRES_COMMAND_OK)
> 				{
> 				syslog(LOG_ERR, "Add column failed: %s", PQerrorMessage(conn));
> 				PQclear(res);
> 				PQfinish(conn);
> 				return(NULL);
> 				}
> 			PQclear(res);
> 
> 			res = PQexec(conn,  "alter table bd_tx_total_log add column mail int;");
> 			if (PQresultStatus(res) != PGRES_COMMAND_OK)
> 				{
> 				syslog(LOG_ERR, "Add column failed: %s", PQerrorMessage(conn));
> 				PQclear(res);
> 				PQfinish(conn);
> 				return(NULL);
> 				}
> 			PQclear(res);
> 			}
> 		else
> 			{
> 			PQclear(res);
> 			}
> 
> 		res = PQexec(conn, "SELECT table_name, column_name from information_schema.columns where table_name = 'bd_rx_log' and column_name = 'mac';");
> 
> 		if (PQresultStatus(res) != PGRES_TUPLES_OK)
> 			{
> 			syslog(LOG_ERR, "Postresql Select failed: %s", PQerrorMessage(conn));
> 			PQclear(res);
> 			PQfinish(conn);
> 			return(NULL);
> 			}
> 
> 		if (PQntuples(res) != 1)
> 			{
> 			PQclear(res);
> 
> 			res = PQexec(conn,  "alter table bd_rx_log add column mac character varying(20);");
115c184
< 			res = PQexec(conn,	"alter table bd_tx_log add column mail int;");
---
> 			res = PQexec(conn,  "alter table bd_tx_log add column mac character varying(20);");
125c194
< 			res = PQexec(conn,	"alter table bd_rx_total_log add column mail int;");
---
> 			res = PQexec(conn,  "alter table bd_rx_total_log add column mac character varying(20);");
135c204
< 			res = PQexec(conn,	"alter table bd_tx_total_log add column mail int;");
---
> 			res = PQexec(conn,  "alter table bd_tx_total_log add column mac character varying(20);");
183,184c252,253
< 		2,		 /* number of params */
< 		NULL,	 /* let the backend deduce param type */
---
> 		2,       /* number of params */
> 		NULL,    /* let the backend deduce param type */
186,188c255,257
< 		NULL,	 /* don't need param lengths since text */
< 		NULL,	 /* default to all text params */
< 		0);		 /* ask for binary results */
---
> 		NULL,    /* don't need param lengths since text */
> 		NULL,    /* default to all text params */
> 		0);      /* ask for binary results */
216c285
< 																															 
---
> 																															
238,239c307,308
< 		3,		 /* number of parameters */
< 		NULL,	 /* let the backend deduce param type */
---
> 		3,       /* number of parameters */
> 		NULL,    /* let the backend deduce param type */
241,243c310,312
< 		NULL,	 /* don't need param lengths since text */
< 		NULL,	 /* default to all text params */
< 		0);		 /* ask for binary results */
---
> 		NULL,    /* don't need param lengths since text */
> 		NULL,    /* default to all text params */
> 		0);      /* ask for binary results */
258a328,403
> PGconn *pgsqlUpdateLinkStatus(PGconn *conn, char *sensor_id)
> 	{
> 	struct Broadcast *bc;
> 	unsigned long diff;
> 	const char *paramValues[3];
> 	char Values[3][MAX_PARAM_SIZE];
> 	PGresult   *res;
> 						
> 	paramValues[0] = Values[0];
> 	paramValues[1] = Values[1];
> 	paramValues[2] = Values[2];
> 
> 	for (bc = Broadcasts; bc; bc = bc->next)
> 		{
> 		strncpy(Values[0], sensor_id, MAX_PARAM_SIZE);
> 		// Determine numeric sensor ID of other sensor
> 		if (!(conn = pgsqlDetermineSensorID(conn, Values[1], bc->sensor_name, bc->interface)))
> 			return(NULL);		
> 		
> 		if (!Values[1][0])
> 			{
> 			syslog(LOG_ERR, "Sensor '%s - %s' does not exist in database, skiping link update", bc->sensor_name, bc->interface);
> 			continue;
> 			}
> 
> 		diff = time(NULL) - bc->received;
> 		snprintf(Values[2], MAX_PARAM_SIZE, "%lu", diff);
> 		res = PQexecParams(conn, "update links set last_update = now()-($3*interval '1 second') where (id1 = $1 and id2 = $2) or (id1 = $2 and id2 = $1);",
> 				3,       /* number of parameters */
> 				NULL,    /* let the backend deduce param type */
> 				paramValues,
> 				NULL,    /* don't need param lengths since text */
> 				NULL,    /* default to all text params */
> 				0);      /* ask for binary results */
> 
> 		if (PQresultStatus(res) != PGRES_COMMAND_OK)
> 			{
> 			syslog(LOG_ERR, "Postresql Update of links table failed: %s", PQerrorMessage(conn));
> 			PQclear(res);
> 			PQfinish(conn);
> 			return(NULL);
> 			}
> 		
> 		// There may be duplicate rows
> 		if (atol(PQcmdTuples(res)) > 0) 
> 			{
> 			PQclear(res); // Sucess, allow loop to fall through
> 			}
> 		else
> 			{
> 			PQclear(res);
> 			
> 			// Link doesn't exist so we must add it
> 			diff = time(NULL) - bc->received;
> 			snprintf(Values[2], MAX_PARAM_SIZE, "%lu", diff);
> 			res = PQexecParams(conn, "insert into links (id1, id2, last_update) values ($1, $2, now()-($3*interval '1 second'));",
> 					3,       /* number of parameters */
> 					NULL,    /* let the backend deduce param type */
> 					paramValues,
> 					NULL,    /* don't need param lengths since text */
> 					NULL,    /* default to all text params */
> 					0);      /* ask for binary results */
> 
> 			if (PQresultStatus(res) != PGRES_COMMAND_OK)
> 				{
> 				syslog(LOG_ERR, "Postresql Insert into links table failed: %s", PQerrorMessage(conn));
> 				PQclear(res);
> 				PQfinish(conn);
> 				return(NULL);
> 				}
> 			PQclear(res);
> 			}
> 		}
> 	return(conn);
> 	}
> 
277,278c422,423
< 			5,		 /* number of parameters */
< 			NULL,	 /* let the backend deduce param type */
---
> 			5,       /* number of parameters */
> 			NULL,    /* let the backend deduce param type */
280,282c425,427
< 			NULL,	 /* don't need param lengths since text */
< 			NULL,	 /* default to all text params */
< 			0);		 /* ask for binary results */
---
> 			NULL,    /* don't need param lengths since text */
> 			NULL,    /* default to all text params */
> 			0);      /* ask for binary results */
308,309c453,454
< 			1,		 /* number of parameters */
< 			NULL,	 /* let the backend deduce param type */
---
> 			1,       /* number of parameters */
> 			NULL,    /* let the backend deduce param type */
311,313c456,458
< 			NULL,	 /* don't need param lengths since text */
< 			NULL,	 /* default to all text params */
< 			0);		 /* ask for binary results */
---
> 			NULL,    /* don't need param lengths since text */
> 			NULL,    /* default to all text params */
> 			0);      /* ask for binary results */
351c496
< 	char Values[13][MAX_PARAM_SIZE];
---
> 	char Values[14][MAX_PARAM_SIZE];
369a515
> 	paramValues[13] = Values[13];
460a607,613
> 	// Update link state
> 	if (!(conn = pgsqlUpdateLinkStatus(conn, sensor_id)))
> 		{
> 		syslog(LOG_ERR, "Count not update link status");
> 		_exit(2);
> 		}
> 
463,464c616,617
< 		0,		 /* number of params */
< 		NULL,	 /* let the backend deduce param type */
---
> 		0,       /* number of params */
> 		NULL,    /* let the backend deduce param type */
466,468c619,621
< 		NULL,	 /* don't need param lengths since text */
< 		NULL,	 /* default to all text params */
< 		0);		 /* ask for binary results */
---
> 		NULL,    /* don't need param lengths since text */
> 		NULL,    /* default to all text params */
> 		0);      /* ask for binary results */
494,495c647,648
< 			sql1 = "INSERT INTO bd_tx_total_log (sensor_id, timestamp, sample_duration, ip, packet_count,total, icmp, udp, tcp, ftp, http, mail, p2p) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);";
< 			sql2 = "INSERT INTO bd_rx_total_log (sensor_id, timestamp, sample_duration, ip, packet_count,total, icmp, udp, tcp, ftp, http, mail, p2p) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);";
---
> 			sql1 = "INSERT INTO bd_tx_total_log (sensor_id, timestamp, sample_duration, mac, ip, packet_count,total, icmp, udp, tcp, ftp, http, mail, p2p) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13,$14);";
> 			sql2 = "INSERT INTO bd_rx_total_log (sensor_id, timestamp, sample_duration, mac, ip, packet_count,total, icmp, udp, tcp, ftp, http, mail, p2p) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13,$14);";
499,500c652,653
< 			sql1 = "INSERT INTO bd_tx_log (sensor_id, timestamp, sample_duration, ip, packet_count, total, icmp, udp, tcp, ftp, http, mail, p2p) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);";
< 			sql2 = "INSERT INTO bd_rx_log (sensor_id, timestamp, sample_duration, ip, packet_count, total, icmp, udp, tcp, ftp, http, mail, p2p) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);"; 
---
> 			sql1 = "INSERT INTO bd_tx_log (sensor_id, timestamp, sample_duration, mac, ip, packet_count, total, icmp, udp, tcp, ftp, http, mail, p2p) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13,$14);";
> 			sql2 = "INSERT INTO bd_rx_log (sensor_id, timestamp, sample_duration, mac, ip, packet_count, total, icmp, udp, tcp, ftp, http, mail, p2p) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13,$14);";
501a655
> 		snprintf(Values[3], MAX_PARAM_SIZE, "%s", IPData->mac[0]);
509,517c663,671
< 			snprintf(Values[4], MAX_PARAM_SIZE, "%llu", Stats->packet_count);
< 			snprintf(Values[5], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->total)/1024.0) + 0.5));
< 			snprintf(Values[6], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->icmp)/1024.0) + 0.5));
< 			snprintf(Values[7], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->udp)/1024.0) + 0.5));
< 			snprintf(Values[8], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->tcp)/1024.0) + 0.5));
< 			snprintf(Values[9], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->ftp)/1024.0) + 0.5));
< 			snprintf(Values[10], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->http)/1024.0) + 0.5));
< 			snprintf(Values[11], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->mail)/1024.0) + 0.5));
< 			snprintf(Values[12], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->p2p)/1024.0) + 0.5));
---
> 			snprintf(Values[5], MAX_PARAM_SIZE, "%llu", Stats->packet_count);
> 			snprintf(Values[6], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->total)/1024.0) + 0.5));
> 			snprintf(Values[7], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->icmp)/1024.0) + 0.5));
> 			snprintf(Values[8], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->udp)/1024.0) + 0.5));
> 			snprintf(Values[9], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->tcp)/1024.0) + 0.5));
> 			snprintf(Values[10], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->ftp)/1024.0) + 0.5));
> 			snprintf(Values[11], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->http)/1024.0) + 0.5));
> 			snprintf(Values[12], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->mail)/1024.0) + 0.5));
> 			snprintf(Values[13], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->p2p)/1024.0) + 0.5));
520,521c674,675
< 				13,		  
< 				NULL,	 /* let the backend deduce param type */
---
> 				13,       
> 				NULL,    /* let the backend deduce param type */
523,525c677,679
< 				NULL,	 /* don't need param lengths since text */
< 				NULL,	 /* default to all text params */
< 				1);		 /* ask for binary results */
---
> 				NULL,    /* don't need param lengths since text */
> 				NULL,    /* default to all text params */
> 				1);      /* ask for binary results */
540,548c694,702
< 			snprintf(Values[4], MAX_PARAM_SIZE, "%llu", Stats->packet_count);
< 			snprintf(Values[5], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->total)/1024.0) + 0.5));
< 			snprintf(Values[6], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->icmp)/1024.0) + 0.5));
< 			snprintf(Values[7], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->udp)/1024.0) + 0.5));
< 			snprintf(Values[8], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->tcp)/1024.0) + 0.5));
< 			snprintf(Values[9], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->ftp)/1024.0) + 0.5));
< 			snprintf(Values[10], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->http)/1024.0) + 0.5));
< 			snprintf(Values[11], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->mail)/1024.0) + 0.5));
< 			snprintf(Values[12], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->p2p)/1024.0) + 0.5));
---
> 			snprintf(Values[5], MAX_PARAM_SIZE, "%llu", Stats->packet_count);
> 			snprintf(Values[6], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->total)/1024.0) + 0.5));
> 			snprintf(Values[7], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->icmp)/1024.0) + 0.5));
> 			snprintf(Values[8], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->udp)/1024.0) + 0.5));
> 			snprintf(Values[9], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->tcp)/1024.0) + 0.5));
> 			snprintf(Values[10], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->ftp)/1024.0) + 0.5));
> 			snprintf(Values[11], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->http)/1024.0) + 0.5));
> 			snprintf(Values[12], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->mail)/1024.0) + 0.5));
> 			snprintf(Values[13], MAX_PARAM_SIZE, "%llu", (long long unsigned int)((((double)Stats->p2p)/1024.0) + 0.5));
551,552c705,706
< 				13,		  
< 				NULL,	 /* let the backend deduce param type */
---
> 				13,       
> 				NULL,    /* let the backend deduce param type */
554,556c708,710
< 				NULL,	 /* don't need param lengths since text */
< 				NULL,	 /* default to all text params */
< 				1);		 /* ask for binary results */
---
> 				NULL,    /* don't need param lengths since text */
> 				NULL,    /* default to all text params */
> 				1);      /* ask for binary results */
567c721
< 			}		
---
> 			}
620,621c774,775
< 			fields+2,		
< 			NULL,	 /* let the backend deduce param type */
---
> 			fields+2,       
> 			NULL,    /* let the backend deduce param type */
623,625c777,779
< 			NULL,	 /* don't need param lengths since text */
< 			NULL,	 /* default to all text params */
< 			1);		 /* ask for binary results */
---
> 			NULL,    /* don't need param lengths since text */
> 			NULL,    /* default to all text params */
> 			1);      /* ask for binary results */
diff -r ../../branches/bandwidthd.IPv4/phphtdocs/.svn/entries ./phphtdocs/.svn/entries
5c5
< svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/branches/bandwidthd.IPv4/phphtdocs
---
> svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/trunk/bandwidthd/phphtdocs
29c29
< details.php
---
> graph.php
35,36c35,36
< 2012-10-15T20:41:22.264774Z
< c60b2a0f7c539146e15aa9ab3112837d
---
> 2012-10-15T20:42:03.993094Z
> 77673c20173295c4ba46ed856844497d
61c61
< 4252
---
> 16743
63c63,66
< x.gif
---
> manage
> dir
> 
> gpscoords.php
69,70c72,73
< 2012-10-15T20:41:22.344775Z
< 3421997bb4ad4b5a7b7629944a1e1659
---
> 2012-10-15T20:42:03.989094Z
> 5263b92f05cd49edc60980ccded95c91
95c98
< 171
---
> 1231
97c100
< header.php
---
> maint.hourly
103,104c106,107
< 2012-10-15T20:41:22.344775Z
< c7e70927c1671eebb1b307d7b7c45f62
---
> 2012-10-15T20:42:03.989094Z
> 349858ff02d0f51cec2271d7651963cb
107a111
> has-props
128,129c132
< 
< 35
---
> 173
131c134
< geographic-management.sql
---
> uptime.php
137,138c140,141
< 2012-10-15T20:41:22.264774Z
< 53a4b9e7dc2859f3e0952942e08419dd
---
> 2012-10-15T20:42:03.993094Z
> cb9eebd21cb4d6c9e371daa900d1aa46
163c166
< 352
---
> 1880
165c168
< sensors.php
---
> config.conf
171,172c174,175
< 2012-10-15T20:41:22.368775Z
< 30475df5da1c26ad2063293864a6a014
---
> 2012-10-15T20:42:03.993094Z
> 49dfd0c05f65f3c642c88efe349cd2e1
176d178
< has-props
197c199,200
< 8102
---
> 
> 282
199c202
< footer.php
---
> signal_level.php
205,206c208,209
< 2012-10-15T20:41:22.368775Z
< d3c4d40ed0c4b0b7a401c0a9df234464
---
> 2012-10-15T20:42:03.993094Z
> c36a8873aa45f907fdf02edde37ef0e1
209a213
> has-props
230,231c234
< 
< 74
---
> 2076
233c236,239
< xml.php
---
> CVS
> dir
> 
> index.php
239,240c245,246
< 2012-10-15T20:41:22.344775Z
< b6249f4568828e7f7c410ba977864f27
---
> 2012-10-15T20:42:03.993094Z
> b5489937a8fb65dce3864231389084f5
244d249
< has-props
265c270,271
< 2716
---
> 
> 10781
267c273
< graph.php
---
> extensions.sql
273,274c279,280
< 2012-10-15T20:41:22.292775Z
< 77673c20173295c4ba46ed856844497d
---
> 2012-10-15T20:42:03.989094Z
> 693abc88681dd6e47cc7b98098b9d1a8
277a284
> has-props
298,302c305
< 
< 16743
< 
< manage
< dir
---
> 258
304c307
< uptime.php
---
> bandwidthd.css
310,311c313,314
< 2012-10-15T20:41:22.284774Z
< cb9eebd21cb4d6c9e371daa900d1aa46
---
> 2012-10-15T20:42:03.993094Z
> 8fe396ee93d75165b47c727faa7cd47a
336c339
< 1880
---
> 1884
338c341
< config.conf
---
> failures.php
344,345c347,348
< 2012-10-15T20:41:22.284774Z
< 49dfd0c05f65f3c642c88efe349cd2e1
---
> 2012-10-15T20:42:03.993094Z
> 43bcc6130041027108c523b488dbb813
348a352
> has-props
369,370c373
< 
< 282
---
> 4499
372c375
< maint.hourly
---
> legend.gif
378,379c381,382
< 2012-10-15T20:41:22.264774Z
< 349858ff02d0f51cec2271d7651963cb
---
> 2012-10-15T20:42:03.993094Z
> 68dc215a19a9e2e587ae5e9176aa652c
404c407
< 173
---
> 1649
406c409
< gpscoords.php
---
> logo.gif
412,413c415,416
< 2012-10-15T20:41:22.264774Z
< 5263b92f05cd49edc60980ccded95c91
---
> 2012-10-15T20:42:03.993094Z
> f7fed5fca05ba335f30fa994a55ccad2
438c441
< 1231
---
> 7573
440c443
< signal_level.php
---
> bd_pgsql_purge.sh
446,447c449,450
< 2012-10-15T20:41:22.344775Z
< c36a8873aa45f907fdf02edde37ef0e1
---
> 2012-10-15T20:42:03.993094Z
> cc60ba4412e257514a052d86e544240b
472,475c475
< 2076
< 
< CVS
< dir
---
> 2305
477c477
< extensions.sql
---
> maint.weekly
483,484c483,484
< 2012-10-15T20:41:22.268774Z
< 693abc88681dd6e47cc7b98098b9d1a8
---
> 2012-10-15T20:42:03.989094Z
> b7f62274ab156e41d0302c4cc13b0c1a
509c509
< 258
---
> 2415
511c511
< index.php
---
> location_statistics.php
517,518c517,518
< 2012-10-15T20:41:22.368775Z
< b5489937a8fb65dce3864231389084f5
---
> 2012-10-15T20:42:03.993094Z
> 951253b968125c08b2f8b81cf198af70
521a522
> has-props
542,543c543
< 
< 10781
---
> 3201
545c545
< bandwidthd.css
---
> include.php
551,552c551,552
< 2012-10-15T20:41:22.344775Z
< 8fe396ee93d75165b47c727faa7cd47a
---
> 2012-10-15T20:42:03.993094Z
> 9b3394e68c759078a17310df85d5852d
556d555
< has-props
577c576,577
< 1884
---
> 
> 1350
579c579
< failures.php
---
> x.gif
585,586c585,586
< 2012-10-15T20:41:22.344775Z
< 43bcc6130041027108c523b488dbb813
---
> 2012-10-15T20:42:03.993094Z
> 3421997bb4ad4b5a7b7629944a1e1659
611c611
< 4499
---
> 171
613c613
< legend.gif
---
> details.php
619,620c619,620
< 2012-10-15T20:41:22.368775Z
< 68dc215a19a9e2e587ae5e9176aa652c
---
> 2012-10-15T20:42:03.989094Z
> c60b2a0f7c539146e15aa9ab3112837d
624d623
< has-props
645c644,645
< 1649
---
> 
> 4252
647c647
< logo.gif
---
> header.php
653,654c653,654
< 2012-10-15T20:41:22.356775Z
< f7fed5fca05ba335f30fa994a55ccad2
---
> 2012-10-15T20:42:03.993094Z
> c7e70927c1671eebb1b307d7b7c45f62
658d657
< has-props
679c678,679
< 7573
---
> 
> 35
681c681
< bd_pgsql_purge.sh
---
> geographic-management.sql
687,688c687,688
< 2012-10-15T20:41:22.344775Z
< cc60ba4412e257514a052d86e544240b
---
> 2012-10-15T20:42:03.989094Z
> 53a4b9e7dc2859f3e0952942e08419dd
713c713
< 2305
---
> 352
715c715
< maint.weekly
---
> sensors.php
721,722c721,722
< 2012-10-15T20:41:22.264774Z
< b7f62274ab156e41d0302c4cc13b0c1a
---
> 2012-10-15T20:42:03.997094Z
> 30475df5da1c26ad2063293864a6a014
747c747
< 2415
---
> 8102
749c749
< location_statistics.php
---
> footer.php
755,756c755,756
< 2012-10-15T20:41:22.284774Z
< 951253b968125c08b2f8b81cf198af70
---
> 2012-10-15T20:42:03.993094Z
> d3c4d40ed0c4b0b7a401c0a9df234464
760d759
< has-props
781c780,781
< 3201
---
> 
> 74
783c783
< include.php
---
> xml.php
789,790c789,790
< 2012-10-15T20:41:22.368775Z
< 9b3394e68c759078a17310df85d5852d
---
> 2012-10-15T20:42:03.993094Z
> b6249f4568828e7f7c410ba977864f27
793a794
> has-props
814,815c815
< 
< 1350
---
> 2716
diff -r ../../branches/bandwidthd.IPv4/phphtdocs/CVS/.svn/entries ./phphtdocs/CVS/.svn/entries
5c5
< svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/branches/bandwidthd.IPv4/phphtdocs/CVS
---
> svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/trunk/bandwidthd/phphtdocs/CVS
29c29
< Entries.Log
---
> Root
35,36c35,36
< 2012-10-15T20:41:22.276774Z
< df68443bd47fe452b65d869306bc1389
---
> 2012-10-15T20:42:03.993094Z
> 6d7c5bc5fe29be693c14e58d46d38d74
61c61
< 15
---
> 70
63c63
< Entries
---
> Entries.Log
69,70c69,70
< 2012-10-15T20:41:22.276774Z
< 5c974c9ee28d1192b634edb0c5b9d5dc
---
> 2012-10-15T20:42:03.993094Z
> df68443bd47fe452b65d869306bc1389
95c95
< 1041
---
> 15
97c97
< Repository
---
> Entries
103,104c103,104
< 2012-10-15T20:41:22.276774Z
< 281137e51d01536c28ed20e58bea27a9
---
> 2012-10-15T20:42:03.993094Z
> 5c974c9ee28d1192b634edb0c5b9d5dc
129c129
< 21
---
> 1041
131c131
< Root
---
> Repository
137,138c137,138
< 2012-10-15T20:41:22.268774Z
< 6d7c5bc5fe29be693c14e58d46d38d74
---
> 2012-10-15T20:42:03.993094Z
> 281137e51d01536c28ed20e58bea27a9
163c163
< 70
---
> 21
diff -r ../../branches/bandwidthd.IPv4/phphtdocs/manage/.svn/entries ./phphtdocs/manage/.svn/entries
5c5
< svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/branches/bandwidthd.IPv4/phphtdocs/manage
---
> svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/trunk/bandwidthd/phphtdocs/manage
29c29
< manage.php
---
> manage_header.php
35,36c35,36
< 2012-10-15T20:41:22.320775Z
< d5648dca3aeaf49ca7e6950d15fbe429
---
> 2012-10-15T20:42:03.993094Z
> 1c736725b94647cb991f8544e5980b76
61c61
< 6561
---
> 393
63c63
< bandwidthd.css
---
> manage_symbols.php
69,70c69,70
< 2012-10-15T20:41:22.320775Z
< 8fe396ee93d75165b47c727faa7cd47a
---
> 2012-10-15T20:42:03.993094Z
> 556ff5ab6c864798c2bff6923b90e474
95c95
< 1884
---
> 1839
97c97
< legend.gif
---
> manage_sensors.php
103,104c103,104
< 2012-10-15T20:41:22.344775Z
< 68dc215a19a9e2e587ae5e9176aa652c
---
> 2012-10-15T20:42:03.993094Z
> 41ca7bde60be920a2184d1b5115c26cf
129c129
< 1649
---
> 4386
131c131,134
< logo.gif
---
> CVS
> dir
> 
> x.gif
137,138c140,141
< 2012-10-15T20:41:22.344775Z
< f7fed5fca05ba335f30fa994a55ccad2
---
> 2012-10-15T20:42:03.993094Z
> 3421997bb4ad4b5a7b7629944a1e1659
163c166
< 7573
---
> 171
165c168
< passwords
---
> manage.php
171,172c174,175
< 2012-10-15T20:41:22.328775Z
< c78e22b75b407b61e3e06fea5eb89c5e
---
> 2012-10-15T20:42:03.993094Z
> d5648dca3aeaf49ca7e6950d15fbe429
197c200
< 19
---
> 6561
199c202
< manage_header.php
---
> bandwidthd.css
205,206c208,209
< 2012-10-15T20:41:22.320775Z
< 1c736725b94647cb991f8544e5980b76
---
> 2012-10-15T20:42:03.993094Z
> 8fe396ee93d75165b47c727faa7cd47a
231c234
< 393
---
> 1884
233c236
< manage_symbols.php
---
> legend.gif
239,240c242,243
< 2012-10-15T20:41:22.328775Z
< 556ff5ab6c864798c2bff6923b90e474
---
> 2012-10-15T20:42:03.993094Z
> 68dc215a19a9e2e587ae5e9176aa652c
265c268
< 1839
---
> 1649
267c270
< manage_sensors.php
---
> logo.gif
273,274c276,277
< 2012-10-15T20:41:22.300775Z
< 41ca7bde60be920a2184d1b5115c26cf
---
> 2012-10-15T20:42:03.993094Z
> f7fed5fca05ba335f30fa994a55ccad2
299,302c302
< 4386
< 
< CVS
< dir
---
> 7573
304c304
< x.gif
---
> passwords
310,311c310,311
< 2012-10-15T20:41:22.320775Z
< 3421997bb4ad4b5a7b7629944a1e1659
---
> 2012-10-15T20:42:03.993094Z
> c78e22b75b407b61e3e06fea5eb89c5e
336c336
< 171
---
> 19
diff -r ../../branches/bandwidthd.IPv4/phphtdocs/manage/CVS/.svn/entries ./phphtdocs/manage/CVS/.svn/entries
5c5
< svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/branches/bandwidthd.IPv4/phphtdocs/manage/CVS
---
> svn+ssh://alestan@svn.code.sf.net/p/bandwidthdipv6/svn/trunk/bandwidthd/phphtdocs/manage/CVS
29c29
< Repository
---
> Entries
35,36c35,36
< 2012-10-15T20:41:22.320775Z
< c43d4fb40e91fb50ba124e89cdb490db
---
> 2012-10-15T20:42:03.993094Z
> 2baebf6297938238c678e8392d04c9d4
61c61
< 28
---
> 408
63c63
< Root
---
> Repository
69,70c69,70
< 2012-10-15T20:41:22.300775Z
< 6d7c5bc5fe29be693c14e58d46d38d74
---
> 2012-10-15T20:42:03.993094Z
> c43d4fb40e91fb50ba124e89cdb490db
95c95
< 70
---
> 28
97c97
< Entries
---
> Root
103,104c103,104
< 2012-10-15T20:41:22.300775Z
< 2baebf6297938238c678e8392d04c9d4
---
> 2012-10-15T20:42:03.993094Z
> 6d7c5bc5fe29be693c14e58d46d38d74
129c129
< 408
---
> 70
